{"version":3,"sources":["../../src/commands/checkout.js"],"names":["writeTreeToDisk","dir","dirpath","tree","entry","type","object","read","oid","entrypath","path","console","log","from","Error","checkout","remote","ref","e","comm","toString","sha","headers"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,eAAeA,eAAf,CAA+B,EAACC,GAAD,EAAMC,OAAN,EAAeC,IAAf,EAA/B,EAAqD;AACnD,OAAK,IAAIC,KAAT,IAAkBD,IAAlB,EAAwB;AACtB,QAAI,EAACE,IAAD,EAAOC,MAAP,KAAiB,MAAM,oBAAUC,IAAV,CAAe,EAACN,GAAD,EAAMO,KAAKJ,MAAMI,GAAjB,EAAf,CAA3B;AACA,QAAIC,YAAa,GAAEP,OAAQ,IAAGE,MAAMM,IAAK,EAAzC;AACAC,YAAQC,GAAR,CAAa,mBAAkBH,SAAU,EAAzC;AACA,YAAQJ,IAAR;AACE,WAAK,MAAL;AACE,cAAM,qBAAMI,SAAN,EAAiBH,MAAjB,CAAN;AACA;AACF,WAAK,MAAL;AACE,YAAIH,OAAO,kBAAQU,IAAR,CAAaP,MAAb,CAAX;AACA,cAAMN,gBAAgB,EAACC,GAAD,EAAMC,SAASO,SAAf,EAA0BN,IAA1B,EAAhB,CAAN;AACA;AACF;AACE,cAAM,IAAIW,KAAJ,CAAW,0BAAyBT,IAAK,uBAAsBH,OAAQ,GAAvE,CAAN;AATJ;AAWD;AACF;;kBAEc,eAAea,QAAf,CAAyB,EAACd,GAAD,EAAMe,MAAN,EAAcC,GAAd,EAAzB,EAA6C;AAC1D;AACA,MAAIT,GAAJ;AACA,MAAI;AACFA,UAAM,MAAM,0BAAW,EAACP,GAAD,EAAMgB,GAAN,EAAX,CAAZ;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACVV,UAAM,MAAM,0BAAW,EAACP,GAAD,EAAMgB,KAAM,GAAED,MAAO,IAAGC,GAAI,EAA5B,EAAX,CAAZ;AACA,UAAM,qBAAO,GAAEhB,GAAI,oBAAmBgB,GAAI,EAApC,EAAuCT,MAAM,IAA7C,CAAN;AACD;AACD,MAAI,EAACH,IAAD,EAAOC,MAAP,KAAiB,MAAM,oBAAUC,IAAV,CAAe,EAACN,GAAD,EAAMO,GAAN,EAAf,CAA3B;AACA,MAAIW,OAAO,oBAAUN,IAAV,CAAeP,OAAOc,QAAP,CAAgB,MAAhB,CAAf,CAAX;AACA,MAAIC,MAAMF,KAAKG,OAAL,GAAenB,IAAzB;AACAQ,UAAQC,GAAR,CAAY,QAAZ,EAAsBS,GAAtB;AACA;AACA,MAAI,EAAChB,IAAD,EAAOC,MAAP,KAAiB,MAAM,oBAAUC,IAAV,CAAe,EAACN,GAAD,EAAMO,KAAKa,GAAX,EAAf,CAA3B;AACAV,UAAQC,GAAR,CAAYP,IAAZ,EAAkBC,OAAOc,QAAP,CAAgB,MAAhB,CAAlB;AACA,MAAIjB,OAAO,kBAAQU,IAAR,CAAaP,MAAb,CAAX;AACA;AACA,QAAMN,gBAAgB,EAACC,GAAD,EAAMC,SAASD,GAAf,EAAoBE,IAApB,EAAhB,CAAN;AACA;AACA,uBAAO,GAAEF,GAAI,YAAb,EAA2B,mBAAkBgB,GAAI,EAAjD;AACD,C","file":"checkout.js","sourcesContent":["import pako from 'pako'\nimport GitObject from '../models/GitObject'\nimport GitCommit from '../models/GitCommit'\nimport GitBlob from '../models/GitBlob'\nimport GitTree from '../models/GitTree'\nimport write from '../utils/write'\nimport read from '../utils/read'\nimport resolveRef from '../utils/resolveRef'\nimport fs from 'fs'\nimport pify from 'pify'\nimport {Buffer} from 'buffer'\n\nasync function writeTreeToDisk({dir, dirpath, tree}) {\n  for (let entry of tree) {\n    let {type, object} = await GitObject.read({dir, oid: entry.oid})\n    let entrypath = `${dirpath}/${entry.path}`\n    console.log(`I'm writing out ${entrypath}`)\n    switch (type) {\n      case 'blob':\n        await write(entrypath, object)\n        break\n      case 'tree': \n        let tree = GitTree.from(object)\n        await writeTreeToDisk({dir, dirpath: entrypath, tree})\n        break\n      default:\n        throw new Error(`Unexpected object type ${type} found in tree for '${dirpath}'`)\n    }\n  }\n}\n\nexport default async function checkout ({dir, remote, ref}) {\n  // Get tree oid\n  let oid\n  try {\n    oid = await resolveRef({dir, ref})\n  } catch (e) {\n    oid = await resolveRef({dir, ref: `${remote}/${ref}`})\n    await write(`${dir}/.git/refs/heads/${ref}`, oid + '\\n')\n  }\n  var {type, object} = await GitObject.read({dir, oid})\n  let comm = GitCommit.from(object.toString('utf8'))\n  let sha = comm.headers().tree\n  console.log('tree: ', sha)\n  // Get top-level tree\n  var {type, object} = await GitObject.read({dir, oid: sha})\n  console.log(type, object.toString('utf8'))\n  let tree = GitTree.from(object)\n  // Write files. TODO: Write them atomically\n  await writeTreeToDisk({dir, dirpath: dir, tree})\n  // Update HEAD TODO: Handle non-branch cases\n  write(`${dir}/.git/HEAD`, `ref: refs/heads/${ref}`)\n}"]}