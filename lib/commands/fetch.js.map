{"version":3,"sources":["../../src/commands/fetch.js"],"names":["request","url","token","headers","res","get","data","fetchRemoteBranches","dir","remote","user","repo","then","json","Promise","all","map","branch","name","commit","sha","encoding","fetchTags","tag","fetchCommits","ref","since","date","Date","toISOString","link","verification","payload","console","log","comm","fromPayloadSignature","signature","oid","write","type","object","toObject","e","message","next","fetchTree","tree","render","entry","fetchBlob","responseType","fetch","default_branch","getBranches","getTags","getCommits","read","from","toString"],"mappings":"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","file":"fetch.js","sourcesContent":["// We're implementing a non-standard clone based on the Github API first, because of CORS.\n// And because we already have the code.\nimport axios from 'axios'\nimport parseLinkHeader from 'parse-link-header'\nimport GitObject from '../models/GitObject'\nimport GitCommit from '../models/GitCommit'\nimport GitBlob from '../models/GitBlob'\nimport GitTree from '../models/GitTree'\nimport write from '../utils/write'\nimport read from '../utils/read'\nimport resolveRef from '../utils/resolveRef'\nimport init from './init'\nimport fs from 'fs'\nimport pify from 'pify'\nimport {Buffer} from 'buffer'\n\nasync function request ({url, token, headers}) {\n  let res = await axios.get(url, {\n    headers: {\n      'Accept': 'application/vnd.github.v3+json',\n      'Authorization': 'token ' + token,\n      ...headers\n    }\n  })\n  return res.data\n}\n\nasync function fetchRemoteBranches ({dir, remote, user, repo, token}) {\n  return request({token, url: `https://api.github.com/repos/${user}/${repo}/branches`})\n  .then(json =>\n    Promise.all(json.map(branch =>\n      write(`${dir}/.git/refs/remotes/${remote}/${branch.name}`, branch.commit.sha + '\\n', {encoding: 'utf8'})\n    ))\n  )\n}\n\nasync function fetchTags ({dir, user, repo, token}) {\n  return request({token, url: `https://api.github.com/repos/${user}/${repo}/tags`})\n  .then(json =>\n    Promise.all(json.map(tag =>\n      // Curiously, tags are not separated between remotes like branches\n      write(`${dir}/.git/refs/tags/${tag.name}`, tag.commit.sha + '\\n', {encoding: 'utf8'})\n    ))\n  )\n}\n\nasync function fetchCommits ({dir, url, user, repo, ref, since, token}) {\n  if (!url) {\n    url = `https://api.github.com/repos/${user}/${repo}/commits?`\n    if (ref) url += `&sha=${ref}`\n    if (since) {\n      let date = (new Date(since * 1000)).toISOString()\n      url += `&since=${date}`\n    }\n  }\n  let res = await axios.get(url, {\n    headers: {\n      'Accept': 'application/vnd.github.cryptographer-preview',\n      'Authorization': 'token ' + token,\n    }\n  })\n  let json = res.data\n  let link = parseLinkHeader(res.headers['link'])\n  \n  for (let commit of json) {\n    if (!commit.commit.verification.payload) {\n      console.log(`Commit ${commit.sha} skipped. Due to a technical limitations and my laziness, only signed commits can be cloned from Github over the API`)\n      continue\n    }\n    try {\n      let comm = GitCommit.fromPayloadSignature({\n        payload: commit.commit.verification.payload,\n        signature: commit.commit.verification.signature,\n      })\n      let oid = await GitObject.write({dir, type: 'commit', object: comm.toObject()})\n      if (commit.sha !== oid) {\n        console.log('AHOY! MATEY! THAR BE TROUBLE WITH \\'EM HASHES!')\n      }\n      console.log(`Added commit ${commit.sha}`)\n    } catch (e) {\n      console.log(e.message, commit.sha)\n    }\n  }\n  \n  if (link && link.next) {\n    return fetchCommits({dir, user, repo, ref, since, token, url: link.next.url})\n  }\n}\n\nasync function fetchTree ({dir, url, user, repo, sha, since, token}) {\n  let json = await request({token, url: `https://api.github.com/repos/${user}/${repo}/git/trees/${sha}`})\n  let tree = new GitTree(json.tree)\n  let oid = await GitObject.write({dir, type: 'tree', object: tree.toObject()})\n  if (sha !== oid) {\n    console.log('AHOY! MATEY! THAR BE TROUBLE WITH \\'EM HASHES!')\n  }\n  console.log(tree.render())\n  return Promise.all(json.tree.map(async entry => {\n    if (entry.type === 'blob') {\n      await fetchBlob({dir, url, user, repo, sha: entry.sha, since, token})\n    } else if (entry.type === 'tree') {\n      await fetchTree({dir, url, user, repo, sha: entry.sha, since, token})\n    }\n  }))\n}\n\nasync function fetchBlob ({dir, url, user, repo, sha, since, token}) {\n  let res = await axios.get(`https://api.github.com/repos/${user}/${repo}/git/blobs/${sha}`, {\n    headers: {\n      'Accept': 'application/vnd.github.raw',\n      'Authorization': 'token ' + token,\n    },\n    responseType: 'arraybuffer'\n  })\n  let oid = await GitObject.write({dir, type: 'blob', object: res.data})\n  if (sha !== oid) {\n    console.log('AHOY! MATEY! THAR BE TROUBLE WITH \\'EM HASHES!')\n  }\n}\n\nexport default async function fetch ({dir, token, user, repo, ref, remote, since}) {\n  let json\n  \n  if (!ref) {\n    console.log('Determining the default branch')\n    json = await request({token, url: `https://api.github.com/repos/${user}/${repo}`})\n    ref = json.default_branch\n  }\n  \n  console.log('Receiving branches list')\n  let getBranches = fetchRemoteBranches({dir, remote, user, repo, token})\n  \n  console.log('Receiving tags list')\n  let getTags = fetchTags({dir, user, repo, token})\n  \n  console.log('Receiving commits')\n  let getCommits = fetchCommits({dir, user, repo, token, ref})\n  \n  await Promise.all([getBranches, getTags, getCommits])\n  \n  // This is all crap to get a tree SHA from a commit SHA. Seriously.\n  let oid = await resolveRef({dir, ref: `${remote}/${ref}`})\n  let {type, object} = await GitObject.read({dir, oid})\n  let comm = GitCommit.from(object.toString('utf8'))\n  let sha = comm.headers().tree\n  console.log('tree: ', sha)\n  \n  await fetchTree({dir, user, repo, token, sha})\n}\n"]}