{"version":3,"sources":["../src/index.js"],"names":["git","dir","Git","constructor","root","operateRemote","githubToken","token","operateToken","branch","name","operateBranch","remote","config","init","fetch","url","user","repo","ref","checkout","clone"],"mappings":";;;;;;kBA6BwBA,G;;AA7BxB;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACe,SAASA,GAAT,CAAcC,GAAd,EAAmB;AAChC,SAAO,IAAIC,GAAJ,CAAQD,GAAR,CAAP;AACD;;AAEM,MAAMC,GAAN,CAAU;AACfC,cAAaF,GAAb,EAAkB;AAChB,SAAKG,IAAL,GAAYH,GAAZ;AACA,SAAKI,aAAL,GAAqB,QAArB;AACD;AACDC,cAAaC,KAAb,EAAoB;AAClB,SAAKC,YAAL,GAAoBD,KAApB;AACA,WAAO,IAAP;AACD;AACDE,SAAQC,IAAR,EAAc;AACZ,SAAKC,aAAL,GAAqBD,IAArB;AACD;AACDE,SAAQF,IAAR,EAAc;AACZ,SAAKL,aAAL,GAAqBK,IAArB;AACD;AACDG,WAAU;AACR,WAAO,wBAAc,KAAKT,IAAnB,CAAP;AACD;AACD,QAAMU,IAAN,GAAc;AACZ,UAAM,oBAAK,KAAKV,IAAV,CAAN;AACA;AACD;AACD,QAAMW,KAAN,CAAaC,GAAb,EAAkB;AAChB,UAAM,qBAAM;AACVf,WAAK,KAAKG,IADA;AAEVa,YAAM,iCAAMD,GAAN,EAAWC,IAFP;AAGVC,YAAM,iCAAMF,GAAN,EAAWE,IAHP;AAIVC,WAAK,iCAAMH,GAAN,EAAWP,MAJN;AAKVG,cAAQ,KAAKP,aALH;AAMVE,aAAO,KAAKC;AANF,KAAN,CAAN;AAQD;AACD,QAAMY,QAAN,CAAgBX,MAAhB,EAAwB,CAEvB;AACD,QAAMY,KAAN,CAAaL,GAAb,EAAkB;AAChB,UAAM,oBAAK,KAAKZ,IAAV,CAAN;AACA,UAAM,qBAAM;AACVH,WAAK,KAAKG,IADA;AAEVa,YAAM,iCAAMD,GAAN,EAAWC,IAFP;AAGVC,YAAM,iCAAMF,GAAN,EAAWE,IAHP;AAIVC,WAAK,iCAAMH,GAAN,EAAWP,MAJN;AAKVG,cAAQ,KAAKP,aALH;AAMVE,aAAO,KAAKC;AANF,KAAN,CAAN;AAQA,UAAM,wBAAS;AACbP,WAAK,KAAKG,IADG;AAEbe,WAAK,iCAAMH,GAAN,EAAWP,MAFH;AAGbG,cAAQ,KAAKP;AAHA,KAAT,CAAN;AAKA;AACD;AAnDc;QAAJH,G,GAAAA,G","file":"index.js","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport ghurl from 'github-url-to-object'\n\nimport GitConfig from './models/GitConfig'\n\nimport init from './commands/init.js'\nimport fetch from './commands/fetch.js'\nimport checkout from './commands/checkout.js'\n\n// We want to be able to do\n\n// git('.').branch('master').tree.checkout()\n// git('.').head('master').tree.checkout()\n// git('.').tag('v1.0').tree.checkout()\n// git('.').tree.addFile(filepath)\n// git('.').branch('master').commit(author, etc)\n// git('.').branch('master').push(upstream, upstreambranch)\n// git('.').fetch(upstream, upstreambranch)\n// git('.').branch('master').merge(git('.').remotes('origin/master'))\n// or should it be assumed we have all remotes/heads/tags fetched and explore directly\n// git('.').branch.master.merge(git('.').remotes.origin.master\n\n// then it's hard to tell that master is a name and merge is an operation. Maybe putting names in strings is good.\n// we could though, do this:\n// git('.').branch('master').merge(git('.').remotes('origin').branch('master'))\n// That's probably the clearest by far.\n\n// Class is merely a fluent command/query builder\nexport default function git (dir) {\n  return new Git(dir)\n}\n\nexport class Git {\n  constructor (dir) {\n    this.root = dir\n    this.operateRemote = 'origin'\n  }\n  githubToken (token) {\n    this.operateToken = token\n    return this\n  }\n  branch (name) {\n    this.operateBranch = name\n  }\n  remote (name) {\n    this.operateRemote = name\n  }\n  config () {\n    return new GitConfig(this.root)\n  }\n  async init () {\n    await init(this.root)\n    return\n  }\n  async fetch (url) {\n    await fetch({\n      dir: this.root,\n      user: ghurl(url).user,\n      repo: ghurl(url).repo,\n      ref: ghurl(url).branch,\n      remote: this.operateRemote,\n      token: this.operateToken\n    })\n  }\n  async checkout (branch) {\n    \n  }\n  async clone (url) {\n    await init(this.root)\n    await fetch({\n      dir: this.root,\n      user: ghurl(url).user,\n      repo: ghurl(url).repo,\n      ref: ghurl(url).branch,\n      remote: this.operateRemote,\n      token: this.operateToken\n    })\n    await checkout({\n      dir: this.root,\n      ref: ghurl(url).branch,\n      remote: this.operateRemote,\n    })\n    return\n  }\n}"]}