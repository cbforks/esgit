{"version":3,"sources":["../../src/models/GitObject.js"],"names":["wrapObject","type","object","buffer","concat","from","length","toString","oid","file","deflate","unwrapObject","inflated","inflate","sha","Error","s","indexOf","i","slice","console","log","actualLength","parseInt","GitObject","read","dir","write"],"mappings":";;;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,UAAT,CAAqB,EAACC,IAAD,EAAOC,MAAP,CAAe,oCAAf,EAArB,EAA0E;AACxE,MAAIC,SAAS,eAAOC,MAAP,CAAc,CACzB,eAAOC,IAAP,CAAYJ,OAAO,GAAnB,CADyB,EAEzB,eAAOI,IAAP,CAAYH,OAAOI,MAAP,CAAcC,QAAd,EAAZ,CAFyB,EAGzB,eAAOF,IAAP,CAAY,CAAC,CAAD,CAAZ,CAHyB,EAIzBH,MAJyB,CAAd,CAAb;AAMA,MAAIM,MAAM,sBAAOL,MAAP,CAAV;AACA,SAAO;AACLK,OADK;AAELC,UAAM,eAAKC,OAAL,CAAaP,MAAb;AAFD,GAAP;AAID;;;AAED,SAASQ,YAAT,CAAuB,EAACH,GAAD,EAAMC,IAAN,CAAY,iCAAZ,EAAvB,EAAsE;AACpE,MAAIG,WAAW,eAAOP,IAAP,CAAY,eAAKQ,OAAL,CAAaJ,IAAb,CAAZ,CAAf;AACA,MAAID,GAAJ,EAAS;AACP,QAAIM,MAAM,sBAAOF,QAAP,CAAV;AACA,QAAIE,QAAQN,GAAZ,EAAiB,MAAM,IAAIO,KAAJ,CAAW,8BAA6BP,GAAI,cAAaM,GAAI,EAA7D,CAAN;AAClB;AACD,MAAIE,IAAIJ,SAASK,OAAT,CAAiB,EAAjB,CAAR,CANoE,CAMvC;AAC7B,MAAIC,IAAIN,SAASK,OAAT,CAAiB,CAAjB,CAAR,CAPoE,CAOxC;AAC5B,MAAIhB,OAAOW,SAASO,KAAT,CAAe,CAAf,EAAkBH,CAAlB,EAAqBT,QAArB,CAA8B,MAA9B,CAAX,CARoE,CAQnB;AACjDa,UAAQC,GAAR,CAAa,WAAUpB,IAAK,KAAIA,KAAKK,MAAO,EAA5C;AACA,MAAIA,SAASM,SAASO,KAAT,CAAeH,IAAE,CAAjB,EAAoBE,CAApB,EAAuBX,QAAvB,CAAgC,MAAhC,CAAb,CAVoE,CAUf;AACrDa,UAAQC,GAAR,CAAa,aAAYf,MAAO,KAAIA,OAAOA,MAAO,EAAlD;AACA,MAAIgB,eAAeV,SAASN,MAAT,IAAmBY,IAAI,CAAvB,CAAnB;AACA;AACA,MAAIK,SAASjB,MAAT,MAAqBgB,YAAzB,EAAuC,MAAM,IAAIP,KAAJ,CAAW,6BAA4BT,MAAO,kBAAiBgB,YAAa,WAA5E,CAAN;AACvC,SAAO;AACLrB,QADK;AAELC,YAAQ,eAAOG,IAAP,CAAYO,SAASO,KAAT,CAAeD,IAAI,CAAnB,CAAZ;AAFH,GAAP;AAID;;AAEc,MAAMM,SAAN,CAAgB;;AAE7B,eAAaC,IAAb,CAAmB,EAACC,GAAD,EAAMlB,GAAN,CAAW,gCAAX,EAAnB,EAAgE;AAC9D,QAAIC,OAAO,MAAM,oBAAM,GAAEiB,GAAI,iBAAgBlB,IAAIW,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAgB,IAAGX,IAAIW,KAAJ,CAAU,CAAV,CAAa,EAA5D,CAAjB;AACA,QAAI,CAACV,IAAL,EAAW,MAAM,IAAIM,KAAJ,CAAW,uBAAsBP,GAAI,YAArC,CAAN;AACX,QAAI,EAACP,IAAD,EAAOC,MAAP,KAAiBS,aAAa,EAACH,GAAD,EAAMC,IAAN,EAAb,CAArB;AACA,WAAO,EAACR,IAAD,EAAOC,MAAP,EAAP;AACD;;AAED,eAAayB,KAAb,CAAoB,EAACD,GAAD,EAAMzB,IAAN,EAAYC,MAAZ,CAAoB,iDAApB,EAApB,EAA2F;AACzF,QAAI,EAACO,IAAD,EAAOD,GAAP,KAAcR,WAAW,EAACC,IAAD,EAAOC,MAAP,EAAX,CAAlB;AACA,UAAM,qBAAO,GAAEwB,GAAI,iBAAgBlB,IAAIW,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAgB,IAAGX,IAAIW,KAAJ,CAAU,CAAV,CAAa,EAA7D,EAAgEV,IAAhE,CAAN;AACA,WAAOD,GAAP;AACD;;AAb4B;kBAAVgB,S","file":"GitObject.js","sourcesContent":["//@flow\r\nimport {Buffer} from 'buffer'\r\nimport pako from 'pako'\r\nimport shasum from 'shasum'\r\nimport read from '../utils/read'\r\nimport write from '../utils/write'\r\n\r\nfunction wrapObject ({type, object} /*: {type: string, object: Buffer}*/) {\r\n  let buffer = Buffer.concat([\r\n    Buffer.from(type + ' '),\r\n    Buffer.from(object.length.toString()),\r\n    Buffer.from([0]),\r\n    object,\r\n  ])\r\n  let oid = shasum(buffer)\r\n  return {\r\n    oid,\r\n    file: pako.deflate(buffer)\r\n  }\r\n}\r\n\r\nfunction unwrapObject ({oid, file} /*: {oid: string, file: Buffer}*/) {\r\n  let inflated = Buffer.from(pako.inflate(file))\r\n  if (oid) {\r\n    let sha = shasum(inflated)\r\n    if (sha !== oid) throw new Error(`SHA check failed! Expected ${oid}, computed ${sha}`)\r\n  }\r\n  let s = inflated.indexOf(32) // first space\r\n  let i = inflated.indexOf(0) // first null value\r\n  let type = inflated.slice(0, s).toString('utf8') // get type of object\r\n  console.log(`type = '${type}' ${type.length}`)\r\n  let length = inflated.slice(s+1, i).toString('utf8') // get type of object\r\n  console.log(`length = '${length}' ${length.length}`)\r\n  let actualLength = inflated.length - (i + 1)\r\n  // verify length\r\n  if (parseInt(length) !== actualLength) throw new Error(`Length mismatch: expected ${length} bytes but got ${actualLength} instead.`)\r\n  return {\r\n    type,\r\n    object: Buffer.from(inflated.slice(i + 1))\r\n  }\r\n}\r\n\r\nexport default class GitObject {\r\n  \r\n  static async read ({dir, oid} /*: {dir: string, oid: string}*/) {\r\n    let file = await read(`${dir}/.git/objects/${oid.slice(0, 2)}/${oid.slice(2)}`)\r\n    if (!file) throw new Error(`Git object with oid ${oid} not found`)\r\n    let {type, object} = unwrapObject({oid, file})\r\n    return {type, object}\r\n  }\r\n  \r\n  static async write ({dir, type, object} /*: {dir: string, type: string, object: Buffer}*/) {\r\n    let {file, oid} = wrapObject({type, object})\r\n    await write(`${dir}/.git/objects/${oid.slice(0, 2)}/${oid.slice(2)}`, file)\r\n    return oid\r\n  }\r\n\r\n}\r\n"]}