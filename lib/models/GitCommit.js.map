{"version":3,"sources":["../../src/models/GitCommit.js"],"names":["formatTimezoneOffset","minutes","sign","Math","abs","hours","floor","String","length","parseTimezoneOffset","offset","match","Number","parseAuthor","author","name","email","timestamp","timezoneOffset","normalize","str","replace","indent","trim","split","map","x","join","outdent","GitCommit","constructor","commit","_commit","isBuffer","toString","Error","fromPayloadSignature","payload","signature","headers","justHeaders","message","justMessage","from","toObject","parseHeaders","slice","indexOf","hs","h","push","obj","key","value","parent","committer","renderHeaders","tree","p","gpgsig","render","withoutSignature","isolateSignature","verifySignature","header","verified","pgp","verifyDetachedSignature","addSignature","signedmsg","createBinaryDetachedSignature","signedCommit","console","log"],"mappings":"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","file":"GitCommit.js","sourcesContent":["//@flow\n'use strict'\nimport {Buffer} from 'buffer'\n\nfunction formatTimezoneOffset (minutes) {\n  let sign = Math.sign(minutes) || 1\n  minutes = Math.abs(minutes)\n  let hours = Math.floor(minutes / 60)\n  minutes -= hours * 60\n  hours = String(hours)\n  minutes = String(minutes)\n  if (hours.length < 2) hours = '0' + hours\n  if (minutes.length < 2) minutes = '0' + minutes\n  return (sign === -1 ? '+' : '-') + hours + minutes\n}\n\nfunction parseTimezoneOffset (offset) {\n  let [, sign, hours, minutes] = offset.match(/(\\+|-)(\\d\\d)(\\d\\d)/)\n  minutes = (sign === '-' ? 1 : -1) * Number(hours) * 60 + Number(minutes)\n  return minutes\n}\n\nfunction parseAuthor (author) {\n  let [, name, email, timestamp, offset] = author.match(/^(.*) <(.*)> (.*) (.*)$/)\n  return {\n    name: name,\n    email: email,\n    timestamp: Number(timestamp),\n    timezoneOffset: parseTimezoneOffset(offset)\n  }\n}\n\nfunction normalize (str) {\n  // remove all <CR>\n  str = str.replace(/\\r/g, '')\n  // no extra newlines up front\n  str = str.replace(/^\\n+/, '')\n  // and a single newline at the end\n  str = str.replace(/\\n+$/, '') + '\\n'\n  return str\n}\n\nfunction indent (str) {\n  return str.trim().split('\\n').map(x => ' ' + x).join('\\n') + '\\n'\n}\n\nfunction outdent (str) {\n  return str.split('\\n').map(x => x.replace(/^ /, '')).join('\\n')\n}\n\n// TODO: Make all functions have static async signature?\n\nexport default class GitCommit {\n  /*::\n  _commit : string\n  */\n  constructor (commit /*: string|Buffer*/) {\n    if (typeof commit === 'string') {\n      this._commit = commit\n    } else if (Buffer.isBuffer(commit)) {\n      this._commit = commit.toString('utf8')\n    } else {\n      throw new Error('invalid type passed to GitCommit constructor')\n    }\n  }\n  \n  static fromPayloadSignature ({payload, signature}) {\n    let headers = GitCommit.justHeaders(payload)\n    let message = GitCommit.justMessage(payload)\n    let commit = normalize(headers + '\\ngpgsig' + indent(signature) + '\\n' + message)\n    return new GitCommit(commit)\n  }\n  \n  static from (commit) {\n    return new GitCommit(commit)\n  }\n  \n  toObject () {\n    return Buffer.from(this._commit, 'utf8')\n  }\n\n  // Todo: allow setting the headers and message\n  headers () {\n    return this.parseHeaders()\n  }\n  \n  // Todo: allow setting the headers and message\n  message () {\n    return GitCommit.justMessage(this._commit)\n  }\n  \n  static justMessage (commit) {\n    return commit.slice(commit.indexOf('\\n\\n') + 2)\n  }\n  \n  static justHeaders (commit) {\n    return commit.slice(0, commit.indexOf('\\n\\n'))\n  }\n\n  parseHeaders () {\n    let headers = GitCommit.justHeaders(this._commit).split('\\n')\n    let hs = []\n    for (let h of headers) {\n      if (h[0] === ' ') {\n        // combine with previous header (without space indent)\n        hs[hs.length - 1] += '\\n' + h.slice(1)\n      } else {\n        hs.push(h)\n      }\n    }\n    let obj = {}\n    for (let h of hs) {\n      let key = h.slice(0, h.indexOf(' '))\n      let value = h.slice(h.indexOf(' ') + 1)\n      obj[key] = value\n    }\n    obj.parent = (obj.parent) ? obj.parent.split(' ') : []\n    if (obj.author) {\n      obj.author = parseAuthor(obj.author)\n    }\n    if (obj.committer) {\n      obj.committer = parseAuthor(obj.committer)\n    }\n    return obj\n  }\n\n  static renderHeaders (obj) {\n    let headers = ''\n    if (obj.tree) {\n      headers += `tree ${obj.tree}\\n`\n    } else {\n      headers += `tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904\\n` // the null tree\n    }\n    if (obj.parent) {\n      headers += 'parent'\n      for (let p of obj.parent) {\n        headers += ' ' + p\n      }\n      headers += '\\n'\n    }\n    let author = obj.author\n    headers += `author ${author.name} <${author.email}> ${author.timestamp} ${formatTimezoneOffset(author.timezoneOffset)}\\n`\n    let committer = obj.committer || obj.author\n    headers += `committer ${committer.name} <${committer.email}> ${committer.timestamp} ${formatTimezoneOffset(committer.timezoneOffset)}\\n`\n    if (obj.gpgsig) {\n      headers += 'gpgsig' + indent(obj.gpgsig)\n    }\n    return headers\n  }\n\n  static render (obj) {\n    return GitCommit.renderHeaders(obj) + '\\n' + obj.message\n  }\n\n  withoutSignature () {\n    let commit = normalize(this._commit)\n    if (commit.indexOf('\\ngpgsig') === -1) return commit\n    let headers = commit.slice(0, commit.indexOf('\\ngpgsig'))\n    let message = commit.slice(commit.indexOf('-----END PGP SIGNATURE-----\\n') + '-----END PGP SIGNATURE-----\\n'.length)\n    return normalize(headers + '\\n' + message)\n  }\n\n  isolateSignature () {\n    let signature = this._commit.slice(\n      this._commit.indexOf('-----BEGIN PGP SIGNATURE-----'),\n      this._commit.indexOf('-----END PGP SIGNATURE-----') + '-----END PGP SIGNATURE-----'.length)\n    return outdent(signature)\n  }\n\n  async verifySignature () {\n    let header = this.parseHeaders()\n    let verified = await pgp.verifyDetachedSignature(header.committer.email, this.withoutSignature(), this.isolateSignature())\n    return verified\n  }\n\n  async addSignature () {\n    let commit = this.withoutSignature()\n    let headers = GitCommit.justHeaders(this._commit)\n    let message = GitCommit.justMessage(this._commit)\n    let header = this.parseHeaders()\n    let signedmsg = await pgp.createBinaryDetachedSignature(header.committer.email, commit)\n    // renormalize the line endings to the one true line-ending\n    signedmsg = normalize(signedmsg)\n    let signedCommit = headers + '\\n' + 'gpgsig' + indent(signedmsg) + '\\n' + message\n    console.log(signedCommit)\n    return signedCommit\n  }\n}\n"]}