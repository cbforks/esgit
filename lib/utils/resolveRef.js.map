{"version":3,"sources":["../../src/utils/resolveRef.js"],"names":["resolveRef","dir","ref","sha","test","length","slice","trim","encoding","Error"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;kBAEe,eAAeA,UAAf,CAA2B,EAACC,GAAD,EAAMC,GAAN,EAA3B,EAAuC;AACpD,MAAIC,GAAJ;AACA;AACA,MAAI,iBAAiBC,IAAjB,CAAsBF,GAAtB,CAAJ,EAAgC;AAC9B;AACA,QAAIA,IAAIG,MAAJ,KAAe,EAAnB,EAAuB;AACrB,UAAI,MAAM,sBAAQ,GAAEJ,GAAI,iBAAgBC,IAAII,KAAJ,CAAU,CAAV,EAAY,CAAZ,CAAe,IAAGJ,IAAII,KAAJ,CAAU,CAAV,CAAa,EAA7D,CAAV,EAA2E;AACzE,eAAOJ,IAAIK,IAAJ,EAAP;AACD;AACH;AACC,KALD,MAKO,IAAIL,IAAIG,MAAJ,KAAe,CAAnB,EAAsB;AAC3B;AACD;AACF;AACD;AACAF,QAAM,MAAM,oBAAM,GAAEF,GAAI,oBAAmBC,GAAI,EAAnC,EAAsC,EAACM,UAAU,MAAX,EAAtC,CAAZ;AACA,MAAIL,GAAJ,EAAS,OAAOA,IAAII,IAAJ,EAAP;AACT;AACAJ,QAAM,MAAM,oBAAM,GAAEF,GAAI,mBAAkBC,GAAI,EAAlC,EAAqC,EAACM,UAAU,MAAX,EAArC,CAAZ;AACA,MAAIL,GAAJ,EAAS,OAAOA,IAAII,IAAJ,EAAP;AACT;AACAJ,QAAM,MAAM,oBAAM,GAAEF,GAAI,sBAAqBC,GAAI,EAArC,EAAwC,EAACM,UAAU,MAAX,EAAxC,CAAZ;AACA,MAAIL,GAAJ,EAAS,OAAOA,IAAII,IAAJ,EAAP;AACT;AACA,QAAM,IAAIE,KAAJ,CAAW,+BAA8BP,GAAI,EAA7C,CAAN;AACD,C","file":"resolveRef.js","sourcesContent":["import exists from './exists'\r\nimport read from './read'\r\n\r\nexport default async function resolveRef ({dir, ref}) {\r\n  let sha\r\n  // Is it a SHA?\r\n  if (/^[0-9a-fA-F]+$/.test(ref)) {\r\n    // Is it a complete SHA (already dereferenced)?\r\n    if (ref.length === 40) {\r\n      if (await exists(`${dir}/.git/objects/${ref.slice(0,2)}/${ref.slice(2)}`)) {\r\n        return ref.trim()\r\n      }\r\n    // Is it a partial SHA?\r\n    } else if (ref.length === 7) {\r\n      // TODO: use file globbing to match partial SHAs\r\n    }\r\n  }\r\n  // Is it a (local) branch?\r\n  sha = await read(`${dir}/.git/refs/heads/${ref}`, {encoding: 'utf8'})\r\n  if (sha) return sha.trim()\r\n  // Is it a tag?\r\n  sha = await read(`${dir}/.git/refs/tags/${ref}`, {encoding: 'utf8'})\r\n  if (sha) return sha.trim()\r\n  // Is it remote branch?\r\n  sha = await read(`${dir}/.git/refs/remotes/${ref}`, {encoding: 'utf8'})\r\n  if (sha) return sha.trim()\r\n  // Do we give up?\r\n  throw new Error(`Could not resolve reference ${ref}`)\r\n}"]}