{"version":3,"sources":["../../src/utils/mkdirs.js"],"names":["mkdir","mkdirs","dirpath","err","code","parent","posix","dirname","dirlist","Promise","all","map"],"mappings":";;;;;QAKsBA,K,GAAAA,K;QAqBAC,M,GAAAA,M;;AAzBtB;;;;AACA;;;;AACA;;;;;;AAEO,eAAeD,KAAf,CAAsBE,OAAtB,CAA8B,aAA9B,EAA6C;AAClD,MAAI;AACF,UAAM,oBAAK,aAAGF,KAAR,EAAeE,OAAf,CAAN;AACA;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZ;AACA,QAAIA,QAAQ,IAAZ,EAAkB;AAClB;AACA,QAAIA,IAAIC,IAAJ,KAAa,QAAjB,EAA2B;AAC3B;AACA,QAAID,IAAIC,IAAJ,KAAa,QAAjB,EAA2B;AACzB,UAAIC,SAAS,eAAKC,KAAL,CAAWC,OAAX,CAAmBL,OAAnB,CAAb;AACA;AACA,UAAIG,WAAW,GAAX,IAAkBA,WAAW,GAA7B,IAAoCA,WAAWH,OAAnD,EAA4D,MAAMC,GAAN;AAC5D;AACA,YAAMH,MAAMK,MAAN,CAAN;AACA,YAAML,MAAME,OAAN,CAAN;AACD;AACF;AACF;AAEM,eAAeD,MAAf,CAAuBO,OAAvB,CAA+B,eAA/B,EAAgD;AACrD,SAAOC,QAAQC,GAAR,CAAYF,QAAQG,GAAR,CAAYX,KAAZ,CAAZ,CAAP;AACD","file":"mkdirs.js","sourcesContent":["//@flow\nimport path from 'path'\nimport pify from 'pify'\nimport fs from 'fs'\n\nexport async function mkdir (dirpath /*: string */) {\n  try {\n    await pify(fs.mkdir)(dirpath)\n    return\n  } catch (err) {\n    // If err is null then operation succeeded!\n    if (err === null) return\n    // If the directory already exists, that's OK!\n    if (err.code === 'EEXIST') return\n    // If we got a \"no such file or directory error\" backup and try again.\n    if (err.code === 'ENOENT') {\n      let parent = path.posix.dirname(dirpath)\n      // Check to see if we've gone too far\n      if (parent === '.' || parent === '/' || parent === dirpath) throw err\n      // Infinite recursion, what could go wrong?\n      await mkdir(parent)\n      await mkdir(dirpath)\n    }\n  }\n}\n\nexport async function mkdirs (dirlist /*: string[] */) {\n  return Promise.all(dirlist.map(mkdir))\n}\n"]}